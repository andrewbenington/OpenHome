// This file was generated by make generate

import { AbilityToString, Ball, ItemToString, Languages, NatureToString } from 'pokemon-resources'
import * as byteLogic from '../util/byteLogic'
import * as encryption from '../util/encryption'
import { AllPKMFields } from '../util/pkmInterface'
import { getLevelGen3Onward, getStats } from '../util/statCalc'
import * as stringLogic from '../util/stringConversion'
import * as types from '../util/types'
import { adjustMovePPBetweenFormats } from '../util/util'

export class PB7 {
  static getName() {
    return 'PB7'
  }
  format: 'PB7' = 'PB7'
  static getBoxSize() {
    return 260
  }
  encryptionConstant: number
  checksum: number
  dexNum: number
  heldItemIndex: number
  trainerID: number
  secretID: number
  exp: number
  abilityIndex: number
  abilityNum: number
  favorite: boolean
  markings: types.MarkingsSixShapesWithColor
  personalityValue: number
  nature: number
  isFatefulEncounter: boolean
  gender: number
  formeNum: number
  evs: types.Stats
  avs: types.Stats
  resortEventStatus: number
  pokerusByte: number
  heightAbsoluteBytes: Uint8Array
  height: number
  weight: number
  formArgument: number
  nickname: string
  moves: number[]
  movePP: number[]
  movePPUps: number[]
  relearnMoves: number[]
  ivs: types.Stats
  isEgg: boolean
  isNicknamed: boolean
  handlerName: string
  handlerGender: boolean
  isCurrentHandler: boolean
  handlerFriendship: number
  fieldEventFatigue1: number
  fieldEventFatigue2: number
  fullness: number
  enjoyment: number
  trainerName: string
  trainerFriendship: number
  receivedYear: number
  receivedMonth: number
  receivedDay: number
  receivedHour: number
  receivedMinute: number
  receivedSecond: number
  eggDate: types.PKMDate | undefined
  metDate: types.PKMDate | undefined
  eggLocationIndex: number
  metLocationIndex: number
  ball: number
  metLevel: number
  hyperTraining: types.HyperTrainStats
  gameOfOrigin: number
  languageIndex: number
  weightAbsoluteBytes: Uint8Array
  statusCondition: number
  level: number
  dirtType: number
  dirtLocation: number
  currentHP: number
  stats: types.Stats
  cp: number
  isMega: number
  megaForme: number
  trainerGender: boolean
  constructor(arg: ArrayBuffer | AllPKMFields, encrypted?: boolean) {
    if (arg instanceof ArrayBuffer) {
      let buffer = arg
      if (encrypted) {
        const unencryptedBytes = encryption.decryptByteArrayGen67(buffer)
        const unshuffledBytes = encryption.unshuffleBlocksGen67(unencryptedBytes)
        buffer = unshuffledBytes
      }
      const dataView = new DataView(buffer)
      this.encryptionConstant = dataView.getUint32(0x0, true)
      this.checksum = dataView.getUint16(0x6, true)
      this.dexNum = dataView.getUint16(0x8, true)
      this.heldItemIndex = dataView.getUint16(0xa, true)
      this.trainerID = dataView.getUint16(0xc, true)
      this.secretID = dataView.getUint16(0xe, true)
      this.exp = dataView.getUint32(0x10, true)
      this.abilityIndex = dataView.getUint8(0x14)
      this.abilityNum = dataView.getUint8(0x15)
      this.favorite = byteLogic.getFlag(dataView, 0x15, 3)
      this.markings = types.markingsSixShapesWithColorFromBytes(dataView, 0x16)
      this.personalityValue = dataView.getUint32(0x18, true)
      this.nature = dataView.getUint8(0x1c)
      this.isFatefulEncounter = byteLogic.getFlag(dataView, 0x1d, 0)
      this.gender = byteLogic.uIntFromBufferBits(dataView, 0x1d, 1, 2, true)
      this.formeNum = byteLogic.uIntFromBufferBits(dataView, 0x1d, 3, 5, true)
      this.evs = types.readStatsFromBytesU8(dataView, 0x1e)
      this.avs = types.readStatsFromBytesU8(dataView, 0x24)
      this.resortEventStatus = dataView.getUint8(0x2a)
      this.pokerusByte = dataView.getUint8(0x2b)
      this.heightAbsoluteBytes = new Uint8Array(buffer).slice(0x2c, 0x30)
      this.height = dataView.getUint8(0x3a)
      this.weight = dataView.getUint8(0x3b)
      this.formArgument = dataView.getUint32(0x3c, true)
      this.nickname = stringLogic.utf16BytesToString(buffer, 0x40, 12)
      this.moves = [
        dataView.getUint16(0x5a, true),
        dataView.getUint16(0x5c, true),
        dataView.getUint16(0x5e, true),
        dataView.getUint16(0x60, true),
      ]
      this.movePP = [
        dataView.getUint8(0x62),
        dataView.getUint8(0x63),
        dataView.getUint8(0x64),
        dataView.getUint8(0x65),
      ]
      this.movePPUps = [
        dataView.getUint8(0x66),
        dataView.getUint8(0x67),
        dataView.getUint8(0x68),
        dataView.getUint8(0x69),
      ]
      this.relearnMoves = [
        dataView.getUint16(0x6a, true),
        dataView.getUint16(0x6c, true),
        dataView.getUint16(0x6e, true),
        dataView.getUint16(0x70, true),
      ]
      this.ivs = types.read30BitIVsFromBytes(dataView, 0x74)
      this.isEgg = byteLogic.getFlag(dataView, 0x74, 30)
      this.isNicknamed = byteLogic.getFlag(dataView, 0x74, 31)
      this.handlerName = stringLogic.utf16BytesToString(buffer, 0x78, 12)
      this.handlerGender = byteLogic.getFlag(dataView, 0x92, 0)
      this.isCurrentHandler = byteLogic.getFlag(dataView, 0x93, 0)
      this.handlerFriendship = dataView.getUint8(0xa2)
      this.fieldEventFatigue1 = dataView.getUint8(0xac)
      this.fieldEventFatigue2 = dataView.getUint8(0xad)
      this.fullness = dataView.getUint8(0xae)
      this.enjoyment = dataView.getUint8(0xaf)
      this.trainerName = stringLogic.utf16BytesToString(buffer, 0xb0, 12)
      this.trainerFriendship = dataView.getUint8(0xca)
      this.receivedYear = dataView.getUint8(0xcb)
      this.receivedMonth = dataView.getUint8(0xcc)
      this.receivedDay = dataView.getUint8(0xcd)
      this.receivedHour = dataView.getUint8(0xce)
      this.receivedMinute = dataView.getUint8(0xcf)
      this.receivedSecond = dataView.getUint8(0xd0)
      this.eggDate = types.pkmDateFromBytes(dataView, 0xd1)
      this.metDate = types.pkmDateFromBytes(dataView, 0xd4)
      this.eggLocationIndex = dataView.getUint16(0xd8, true)
      this.metLocationIndex = dataView.getUint16(0xda, true)
      this.ball = dataView.getUint8(0xdc)
      this.metLevel = dataView.getUint8(0xdd)
      this.hyperTraining = types.readHyperTrainStatsFromBytes(dataView, 0xde)
      this.gameOfOrigin = dataView.getUint8(0xdf)
      this.languageIndex = dataView.getUint8(0xe3)
      this.weightAbsoluteBytes = new Uint8Array(buffer).slice(0xe4, 0xe8)
      this.statusCondition = dataView.getUint32(0xe8, true)
      this.level = dataView.getUint8(0xec)
      this.dirtType = dataView.getUint8(0xed)
      this.dirtLocation = dataView.getUint8(0xee)
      this.currentHP = dataView.getUint8(0xf0)
      this.stats = types.readStatsFromBytesU16(dataView, 0xf2)
      this.cp = dataView.getUint16(0xfe, true)
      this.isMega = dataView.getUint8(0x100)
      this.megaForme = dataView.getUint8(0x101)
      this.trainerGender = byteLogic.getFlag(dataView, 0xdd, 7)
    } else {
      const other = arg
      this.encryptionConstant = other.encryptionConstant ?? 0
      this.checksum = other.checksum ?? 0
      this.dexNum = other.dexNum
      this.heldItemIndex = 0
      this.trainerID = other.trainerID
      this.secretID = other.secretID
      this.exp = other.exp
      this.abilityIndex = other.abilityIndex ?? 0
      this.abilityNum = other.abilityNum ?? 0
      this.favorite = other.favorite ?? false
      this.markings = types.markingsSixShapesWithColorFromOther(other.markings) ?? {
        circle: false,
        triangle: false,
        square: false,
        heart: false,
        star: false,
        diamond: false,
      }
      this.personalityValue = other.personalityValue ?? 0
      this.nature = other.nature ?? 0
      this.isFatefulEncounter = other.isFatefulEncounter ?? false
      this.gender = other.gender ?? 0
      this.formeNum = other.formeNum
      this.evs = {
        hp: 0,
        atk: 0,
        def: 0,
        spe: 0,
        spa: 0,
        spd: 0,
      }
      this.avs = other.avs ?? {
        hp: 0,
        atk: 0,
        def: 0,
        spe: 0,
        spa: 0,
        spd: 0,
      }
      this.resortEventStatus = other.resortEventStatus ?? 0
      this.pokerusByte = other.pokerusByte ?? 0
      this.heightAbsoluteBytes = other.heightAbsoluteBytes ?? new Uint8Array(4)
      this.height = other.height ?? 0
      this.weight = other.weight ?? 0
      this.formArgument = other.formArgument ?? 0
      this.nickname = other.nickname
      this.moves = other.moves.filter((_, i) => LGPE_VALID_MOVES.includes(other.moves[i]))
      this.movePP = adjustMovePPBetweenFormats(this, other).filter((_, i) =>
        LGPE_VALID_MOVES.includes(other.moves[i])
      )
      this.movePPUps = other.movePPUps.filter((_, i) => LGPE_VALID_MOVES.includes(other.moves[i]))
      this.relearnMoves = other.relearnMoves?.filter((_, i) =>
        LGPE_VALID_MOVES.includes(other.moves[i])
      ) ?? [0, 0, 0, 0]
      this.ivs = other.ivs ?? {
        hp: 0,
        atk: 0,
        def: 0,
        spe: 0,
        spa: 0,
        spd: 0,
      }
      this.isEgg = other.isEgg ?? false
      this.isNicknamed = other.isNicknamed ?? false
      this.handlerName = ''
      this.handlerGender = false
      this.isCurrentHandler = false
      this.handlerFriendship = 0
      this.fieldEventFatigue1 = other.fieldEventFatigue1 ?? 0
      this.fieldEventFatigue2 = other.fieldEventFatigue2 ?? 0
      this.fullness = other.fullness ?? 0
      this.enjoyment = other.enjoyment ?? 0
      this.trainerName = other.trainerName
      this.trainerFriendship = other.trainerFriendship ?? 0
      this.receivedYear = other.receivedYear ?? 0
      this.receivedMonth = other.receivedMonth ?? 0
      this.receivedDay = other.receivedDay ?? 0
      this.receivedHour = other.receivedHour ?? 0
      this.receivedMinute = other.receivedMinute ?? 0
      this.receivedSecond = other.receivedSecond ?? 0
      this.eggDate = other.eggDate ?? undefined
      this.metDate = other.metDate ?? {
        month: new Date().getMonth(),
        day: new Date().getDate(),
        year: new Date().getFullYear(),
      }
      this.eggLocationIndex = other.eggLocationIndex ?? 0
      this.metLocationIndex = other.metLocationIndex ?? 0
      if (other.ball && PB7.allowedBalls().includes(other.ball)) {
        this.ball = other.ball
      } else {
        this.ball = Ball.Poke
      }
      this.metLevel = other.metLevel ?? 0
      this.hyperTraining = other.hyperTraining ?? {
        hp: false,
        atk: false,
        def: false,
        spa: false,
        spd: false,
        spe: false,
      }
      this.gameOfOrigin = other.gameOfOrigin
      this.languageIndex = other.languageIndex
      this.weightAbsoluteBytes = other.weightAbsoluteBytes ?? new Uint8Array(4)
      this.statusCondition = other.statusCondition ?? 0
      this.level = other.level ?? 0
      this.dirtType = other.dirtType ?? 0
      this.dirtLocation = other.dirtLocation ?? 0
      this.currentHP = other.currentHP
      this.stats = other.stats ?? {
        hp: 0,
        atk: 0,
        def: 0,
        spe: 0,
        spa: 0,
        spd: 0,
      }
      this.cp = other.cp ?? 0
      this.isMega = other.isMega ?? 0
      this.megaForme = other.megaForme ?? 0
      this.trainerGender = other.trainerGender
    }
  }

  static fromBytes(buffer: ArrayBuffer): PB7 {
    return new PB7(buffer)
  }

  toBytes(options?: types.ToBytesOptions): ArrayBuffer {
    const buffer = new ArrayBuffer(options?.includeExtraFields ? 260 : 260)
    const dataView = new DataView(buffer)

    dataView.setUint32(0x0, this.encryptionConstant, true)
    dataView.setUint16(0x6, this.checksum, true)
    dataView.setUint16(0x8, this.dexNum, true)
    dataView.setUint16(0xa, this.heldItemIndex, true)
    dataView.setUint16(0xc, this.trainerID, true)
    dataView.setUint16(0xe, this.secretID, true)
    dataView.setUint32(0x10, this.exp, true)
    dataView.setUint8(0x14, this.abilityIndex)
    dataView.setUint8(0x15, this.abilityNum)
    byteLogic.setFlag(dataView, 0x15, 3, this.favorite)
    types.markingsSixShapesWithColorToBytes(dataView, 0x16, this.markings)
    dataView.setUint32(0x18, this.personalityValue, true)
    dataView.setUint8(0x1c, this.nature)
    byteLogic.setFlag(dataView, 0x1d, 0, this.isFatefulEncounter)
    byteLogic.uIntToBufferBits(dataView, this.gender, 29, 1, 2, true)
    byteLogic.uIntToBufferBits(dataView, this.formeNum, 29, 3, 5, true)
    types.writeStatsToBytesU8(dataView, 0x1e, this.evs)
    types.writeStatsToBytesU8(dataView, 0x24, this.avs)
    dataView.setUint8(0x2a, this.resortEventStatus)
    dataView.setUint8(0x2b, this.pokerusByte)
    new Uint8Array(buffer).set(new Uint8Array(this.heightAbsoluteBytes.slice(0, 4)), 0x2c)
    dataView.setUint8(0x3a, this.height)
    dataView.setUint8(0x3b, this.weight)
    dataView.setUint32(0x3c, this.formArgument, true)
    stringLogic.writeUTF16StringToBytes(dataView, this.nickname, 0x40, 12)
    for (let i = 0; i < 4; i++) {
      dataView.setUint16(0x5a + i * 2, this.moves[i], true)
    }

    for (let i = 0; i < 4; i++) {
      dataView.setUint8(0x62 + i, this.movePP[i])
    }

    for (let i = 0; i < 4; i++) {
      dataView.setUint8(0x66 + i, this.movePPUps[i])
    }

    for (let i = 0; i < 4; i++) {
      dataView.setUint16(0x6a + i * 2, this.relearnMoves[i], true)
    }
    types.write30BitIVsToBytes(dataView, 0x74, this.ivs)
    byteLogic.setFlag(dataView, 0x74, 30, this.isEgg)
    byteLogic.setFlag(dataView, 0x74, 31, this.isNicknamed)
    stringLogic.writeUTF16StringToBytes(dataView, this.handlerName, 0x78, 12)
    byteLogic.setFlag(dataView, 0x92, 0, this.handlerGender)
    byteLogic.setFlag(dataView, 0x93, 0, this.isCurrentHandler)
    dataView.setUint8(0xa2, this.handlerFriendship)
    dataView.setUint8(0xac, this.fieldEventFatigue1)
    dataView.setUint8(0xad, this.fieldEventFatigue2)
    dataView.setUint8(0xae, this.fullness)
    dataView.setUint8(0xaf, this.enjoyment)
    stringLogic.writeUTF16StringToBytes(dataView, this.trainerName, 0xb0, 12)
    dataView.setUint8(0xca, this.trainerFriendship)
    dataView.setUint8(0xcb, this.receivedYear)
    dataView.setUint8(0xcc, this.receivedMonth)
    dataView.setUint8(0xcd, this.receivedDay)
    dataView.setUint8(0xce, this.receivedHour)
    dataView.setUint8(0xcf, this.receivedMinute)
    dataView.setUint8(0xd0, this.receivedSecond)
    types.writePKMDateToBytes(dataView, 0xd1, this.eggDate)
    types.writePKMDateToBytes(dataView, 0xd4, this.metDate)
    dataView.setUint16(0xd8, this.eggLocationIndex, true)
    dataView.setUint16(0xda, this.metLocationIndex, true)
    dataView.setUint8(0xdc, this.ball)
    dataView.setUint8(0xdd, this.metLevel)
    types.writeHyperTrainStatsToBytes(dataView, 0xde, this.hyperTraining)
    dataView.setUint8(0xdf, this.gameOfOrigin)
    dataView.setUint8(0xe3, this.languageIndex)
    new Uint8Array(buffer).set(new Uint8Array(this.weightAbsoluteBytes.slice(0, 4)), 0xe4)
    dataView.setUint32(0xe8, this.statusCondition, true)
    dataView.setUint8(0xec, this.level)
    dataView.setUint8(0xed, this.dirtType)
    dataView.setUint8(0xee, this.dirtLocation)
    dataView.setUint8(0xf0, this.currentHP)
    types.writeStatsToBytesU16(dataView, 0xf2, this.stats)
    dataView.setUint16(0xfe, this.cp, true)
    dataView.setUint8(0x100, this.isMega)
    dataView.setUint8(0x101, this.megaForme)
    byteLogic.setFlag(dataView, 0xdd, 7, this.trainerGender)
    return buffer
  }

  public getStats() {
    return getStats(this)
  }

  public get language() {
    return Languages[this.languageIndex]
  }

  public get abilityName() {
    return AbilityToString(this.abilityIndex)
  }
  public get heldItemName() {
    return ItemToString(this.heldItemIndex)
  }

  public get heightAbsolute() {
    return new DataView(this.heightAbsoluteBytes.buffer).getFloat32(0, true)
  }

  public get heightDeviation() {
    return 0.4
  }

  public get weightAbsolute() {
    return new DataView(this.weightAbsoluteBytes.buffer).getFloat32(0, true)
  }

  public get weightDeviation() {
    return 0.4
  }

  public get natureName() {
    return NatureToString(this.nature)
  }

  public calcChecksum() {
    return encryption.get16BitChecksumLittleEndian(this.toBytes(), 0x08, 0xe8)
  }

  public refreshChecksum() {
    this.checksum = encryption.get16BitChecksumLittleEndian(this.toBytes(), 0x08, 0xe8)
  }

  public toPCBytes() {
    const shuffledBytes = encryption.shuffleBlocksGen67(this.toBytes())
    return encryption.decryptByteArrayGen67(shuffledBytes)
  }

  public getLevel() {
    return getLevelGen3Onward(this.dexNum, this.exp)
  }

  isShiny() {
    return (
      (this.trainerID ^
        this.secretID ^
        (this.personalityValue & 0xffff) ^
        ((this.personalityValue >> 16) & 0xffff)) <
      16
    )
  }

  isSquareShiny() {
    return !(
      this.trainerID ^
      this.secretID ^
      (this.personalityValue & 0xffff) ^
      ((this.personalityValue >> 16) & 0xffff)
    )
  }

  static maxValidMove() {
    return 165
  }

  static maxValidBall() {
    return 0
  }

  static allowedBalls() {
    return [1, 2, 3, 4, 12]
  }
}

export default PB7

const LGPE_VALID_MOVES = [
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
  28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
  76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
  119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
  138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
  157, 158, 159, 160, 161, 162, 163, 164, 165, 182, 188, 200, 224, 227, 231, 242, 243, 247, 252,
  257, 261, 263, 269, 270, 276, 280, 281, 339, 347, 355, 364, 369, 389, 394, 398, 399, 403, 404,
  405, 406, 417, 420, 430, 438, 446, 453, 483, 492, 499, 503, 504, 525, 529, 583, 585, 605, 606,
  729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
]
