// This file was generated by make generate


     
import { adjustMovePPBetweenFormats } from '../util/util'
import { Languages, ItemToString, ItemFromString, AbilityToString, NatureToString, Ball } from 'pokemon-resources'
import { getStats } from '../util/statCalc'
import * as byteLogic from '../util/byteLogic'
import * as stringLogic from '../util/stringConversion'
import * as types from '../util/types'
import { AllPKMFields } from '../util/pkmInterface'
import { getLevelGen3Onward } from '../util/statCalc'



export class OHPKM {
  static getName() {return 'OHPKM'}
  format: 'OHPKM' = 'OHPKM'
  static getBoxSize() {return 433 }
  encryptionConstant: number
  sanity: number
  checksum: number
  dexNum: number
  heldItemIndex: number
  trainerID: number
  secretID: number
  exp: number
  abilityIndex: number
  abilityNum: number
  favorite: boolean
  canGigantamax: boolean
  isAlpha: boolean
  isNoble: boolean
  isShadow: boolean
  markings: types.MarkingsSixShapesWithColor
  alphaMove: number
  personalityValue: number
  nature: number
  statNature: number
  flag2LA: boolean
  gender: number
  formeNum: number
  formNum: number
  evs: types.Stats
  contest: types.ContestStats
  pokerusByte: number
  contestMemoryCount: number
  battleMemoryCount: number
  sociability: number
  height: number
  weight: number
  scale: number
  moves: number[]
  movePP: number[]
  nickname: string
  movePPUps: number[]
  relearnMoves: number[]
  ivs: types.Stats
  isEgg: boolean
  isNicknamed: boolean
  dynamaxLevel: number
  teraTypeOriginal: number
  teraTypeOverride: number
  unknownA0: number
  gvs: types.Stats
  handlerName: string
  handlerLanguage: number
  resortEventStatus: number
  handlerID: number
  handlerFriendship: number
  handlerAffection: number
  superTrainingFlags: number
  superTrainingDistFlags: number
  secretSuperTrainingUnlocked: boolean
  secretSuperTrainingComplete: boolean
  trainingBagHits: number
  trainingBag: number
  palma: number
  pokeStarFame: number
  metTimeOfDay: number
  handlerGender: boolean
  isNsPokemon: boolean
  shinyLeaves: number
  fullness: number
  enjoyment: number
  gameOfOrigin: number
  gameOfOriginBattle: number
  country: number
  region: number
  consoleRegion: number
  languageIndex: number
  unknownF3: number
  formArgument: number
  affixedRibbon: number | undefined
  geolocations: types.Geolocation[]
  encounterType: number
  performance: number
  trainerName: string
  trainerFriendship: number
  trainerAffection: number
  eggDate: types.PKMDate | undefined
  metDate: types.PKMDate | undefined
  ball: number
  eggLocationIndex: number
  metLocationIndex: number
  metLevel: number
  obedienceLevel: number
  homeTracker: Uint8Array
  trFlagsSwSh: Uint8Array
  tmFlagsBDSP: Uint8Array
  moveFlagsLA: Uint8Array
  tutorFlagsLA: Uint8Array
  masterFlagsLA: Uint8Array
  tmFlagsSV: Uint8Array
  tmFlagsSVDLC: Uint8Array
  isFatefulEncounter: boolean
  constructor(arg: ArrayBuffer | AllPKMFields) {
    if (arg instanceof ArrayBuffer) {
      const buffer = arg
      const dataView = new DataView(buffer)
        this.encryptionConstant = dataView.getUint32(0x0, true)
        this.sanity = dataView.getUint16(0x4, true)
        this.checksum = dataView.getUint16(0x6, true)
        this.dexNum = dataView.getUint16(0x8, true)
        this.heldItemIndex = dataView.getUint16(0xa, true)
        this.trainerID = dataView.getUint16(0xc, true)
        this.secretID = dataView.getUint16(0xe, true)
        this.exp = dataView.getUint32(0x10, true)
        this.abilityIndex = dataView.getUint16(0x14, true)
        this.abilityNum = dataView.getUint8(0x16)
        this.favorite = byteLogic.getFlag(dataView, 0x16, 3)
        this.canGigantamax = byteLogic.getFlag(dataView, 0x16, 4)
        this.isAlpha = byteLogic.getFlag(dataView, 0x16, 5)
        this.isNoble = byteLogic.getFlag(dataView, 0x16, 6)
        this.isShadow = byteLogic.getFlag(dataView, 0x16, 7)
        this.markings = types.markingsSixShapesWithColorFromBytes(dataView, 0x18)
        this.alphaMove = dataView.getUint16(0x1a, true)
        this.personalityValue = dataView.getUint32(0x1c, true)
        this.nature = dataView.getUint8(0x20)
        this.statNature = dataView.getUint8(0x21)
        this.flag2LA = byteLogic.getFlag(dataView, 0x22, 1)
        this.gender = dataView.getUint8(0x22)
        this.formeNum = dataView.getUint16(0x24, true)
        this.formNum = dataView.getUint16(0x24, true)
        this.evs = types.readStatsFromBytesU8(dataView, 0x26)
        this.contest = types.readContestStatsFromBytes(dataView, 0x2c)
        this.pokerusByte = dataView.getUint8(0x32)
        this.contestMemoryCount = dataView.getUint8(0x34)
        this.battleMemoryCount = dataView.getUint8(0x35)
        this.sociability = dataView.getUint32(0x4c, true)
        this.height = dataView.getUint8(0x50)
        this.weight = dataView.getUint8(0x51)
        this.scale = dataView.getUint8(0x52)
        this.moves = [
dataView.getUint16(0x54, true),
dataView.getUint16(0x56, true),
dataView.getUint16(0x58, true),
dataView.getUint16(0x5a, true),

]
        this.movePP = [
dataView.getUint8(0x5c),
dataView.getUint8(0x5d),
dataView.getUint8(0x5e),
dataView.getUint8(0x5f),

]
        this.nickname = stringLogic.utf16BytesToString(buffer, 0x60, 12)
        this.movePPUps = [
dataView.getUint8(0x86),
dataView.getUint8(0x87),
dataView.getUint8(0x88),
dataView.getUint8(0x89),

]
        this.relearnMoves = [
dataView.getUint16(0x8a, true),
dataView.getUint16(0x8c, true),
dataView.getUint16(0x8e, true),
dataView.getUint16(0x90, true),

]
        