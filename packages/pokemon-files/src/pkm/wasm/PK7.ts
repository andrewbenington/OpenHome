// This file was generated by make generate

import * as PkmWasm from '@pokemon-wasm/pkm_rs'
import {
  AbilityToString,
  Ball,
  ItemFromString,
  ItemToString,
  Languages,
  ModernRibbons,
  NatureToString,
} from 'pokemon-resources'
import * as encryption from '../../util/encryption'
import { AllPKMFields } from '../../util/pkmInterface'
import { filterRibbons } from '../../util/ribbonLogic'
import { getLevelGen3Onward, getStats } from '../../util/statCalc'
import * as types from '../../util/types'
import { adjustMovePPBetweenFormats } from '../../util/util'
import {
  contestStatsToWasm,
  convertPokeDateOptional,
  geolocationsFromWasm,
  geolocationsToWasm,
  markingsSixShapesColorsFromWasm,
  markingsSixShapesColorsToWasm,
  statsToWasmStats8,
  trainerMemoryToWasm,
} from './convert'

export class Pk7Rust {
  static getName() {
    return 'PK7'
  }
  format: 'PK7' = 'PK7'
  static getBoxSize() {
    return 232
  }
  inner: PkmWasm.Pk7
  finalizationRegistry: FinalizationRegistry<string>

  constructor(arg: ArrayBuffer | AllPKMFields, encrypted?: boolean) {
    if (arg instanceof ArrayBuffer) {
      let buffer = arg
      if (encrypted) {
        const unencryptedBytes = encryption.decryptByteArrayGen67(buffer)
        const unshuffledBytes = encryption.unshuffleBlocksGen67(unencryptedBytes)
        buffer = unshuffledBytes
      }

      this.inner = PkmWasm.Pk7.fromBytes(new Uint8Array(buffer))
      console.log('registering ' + this.inner.nickname)
      this.finalizationRegistry = new FinalizationRegistry((message) => {
        console.log('registry message: ' + message)
        this.inner.free()
      })
      this.finalizationRegistry.register(this, this.nickname)
    } else {
      const other = arg
      this.inner = PkmWasm.Pk7.fromBytes(new Uint8Array(Pk7Rust.getBoxSize()))
      console.log('registering ' + this.inner.nickname)
      this.finalizationRegistry = new FinalizationRegistry((message) => {
        console.log('registry message: ' + message)
        this.inner.free()
      })
      this.finalizationRegistry.register(this, this.nickname)

      this.encryptionConstant = other.encryptionConstant ?? 0
      this.sanity = other.sanity ?? 0
      this.checksum = other.checksum ?? 0
      this.dexNum = other.dexNum
      this.heldItemIndex = ItemFromString(other.heldItemName)
      this.trainerID = other.trainerID
      this.secretID = other.secretID
      this.exp = other.exp
      this.abilityIndex = other.abilityIndex ?? 0
      this.abilityNum = other.abilityNum ?? 0
      this.markings = types.markingsSixShapesWithColorFromOther(other.markings) ?? {
        circle: false,
        triangle: false,
        square: false,
        heart: false,
        star: false,
        diamond: false,
      }
      this.personalityValue = other.personalityValue ?? 0
      this.nature = other.nature ?? 0
      this.isFatefulEncounter = other.isFatefulEncounter ?? false
      this.gender = other.gender ?? 0
      this.formeNum = other.formeNum
      this.evs = other.evs ?? {
        hp: 0,
        atk: 0,
        def: 0,
        spe: 0,
        spa: 0,
        spd: 0,
      }
      this.contest = other.contest ?? {
        cool: 0,
        beauty: 0,
        cute: 0,
        smart: 0,
        tough: 0,
        sheen: 0,
      }
      this.resortEventStatus = other.resortEventStatus ?? 0
      this.pokerusByte = other.pokerusByte ?? 0
      this.superTrainingFlags = other.superTrainingFlags ?? 0
      this.contestMemoryCount = other.contestMemoryCount ?? 0
      this.battleMemoryCount = other.battleMemoryCount ?? 0
      this.superTrainingDistFlags = other.superTrainingDistFlags ?? 0
      this.formArgument = other.formArgument ?? 0
      this.nickname = other.nickname
      this.moves = other.moves.filter((_, i) => other.moves[i] <= Pk7Rust.maxValidMove())
      this.movePP = adjustMovePPBetweenFormats(this, other).filter(
        (_, i) => other.moves[i] <= Pk7Rust.maxValidMove()
      )
      this.movePPUps = other.movePPUps.filter((_, i) => other.moves[i] <= Pk7Rust.maxValidMove())
      this.relearnMoves = other.relearnMoves?.filter(
        (_, i) => other.moves[i] <= Pk7Rust.maxValidMove()
      ) ?? [0, 0, 0, 0]
      this.secretSuperTrainingUnlocked = other.secretSuperTrainingUnlocked ?? false
      this.secretSuperTrainingComplete = other.secretSuperTrainingComplete ?? false
      this.ivs = other.ivs ?? {
        hp: 0,
        atk: 0,
        def: 0,
        spe: 0,
        spa: 0,
        spd: 0,
      }
      this.isEgg = other.isEgg ?? false
      this.isNicknamed = other.isNicknamed ?? false
      this.handlerName = other.handlerName ?? ''
      this.handlerGender = other.handlerGender ?? false
      this.isCurrentHandler = other.isCurrentHandler ?? false
      this.geolocations = other.geolocations ?? [
        {
          region: 0,
          country: 0,
        },
        {
          region: 0,
          country: 0,
        },
        {
          region: 0,
          country: 0,
        },
        {
          region: 0,
          country: 0,
        },
        {
          region: 0,
          country: 0,
        },
      ]
      this.handlerFriendship = other.handlerFriendship ?? 0
      this.handlerAffection = other.handlerAffection ?? 0
      this.fullness = other.fullness ?? 0
      this.enjoyment = other.enjoyment ?? 0
      this.trainerName = other.trainerName
      this.trainerFriendship = other.trainerFriendship ?? 0
      this.trainerAffection = other.trainerAffection ?? 0
      this.eggDate = other.eggDate ?? undefined
      this.metDate = other.metDate ?? {
        month: new Date().getMonth(),
        day: new Date().getDate(),
        year: new Date().getFullYear(),
      }
      this.eggLocationIndex = other.eggLocationIndex ?? 0
      this.metLocationIndex = other.metLocationIndex ?? 0
      if (other.ball && Pk7Rust.maxValidBall() >= other.ball) {
        this.ball = other.ball
      } else {
        this.ball = Ball.Poke
      }
      this.metLevel = other.metLevel ?? 0
      this.hyperTraining = other.hyperTraining ?? {
        hp: false,
        atk: false,
        def: false,
        spa: false,
        spd: false,
        spe: false,
      }
      this.gameOfOrigin = other.gameOfOrigin
      this.country = other.country ?? 0
      this.region = other.region ?? 0
      this.consoleRegion = other.consoleRegion ?? 0
      this.languageIndex = other.languageIndex
      this.statusCondition = other.statusCondition ?? 0
      this.currentHP = other.currentHP ?? 0
      this.ribbons = filterRibbons(other.ribbons ?? [], [ModernRibbons], 'Battle Tree Master') ?? []
      this.handlerMemory = other.handlerMemory ?? {
        intensity: 0,
        memory: 0,
        feeling: 0,
        textVariables: 0,
      }
      this.trainerMemory = other.trainerMemory ?? {
        intensity: 0,
        memory: 0,
        feeling: 0,
        textVariables: 0,
      }
      this.trainerGender = other.trainerGender
    }
  }

  get encryptionConstant() {
    return this.inner.encryption_constant
  }
  set encryptionConstant(value: number) {
    this.inner.encryption_constant = value
  }

  get sanity() {
    return this.inner.sanity
  }
  set sanity(value: number) {
    this.inner.sanity = value
  }

  get checksum() {
    return this.inner.checksum
  }
  set checksum(value: number) {
    this.inner.checksum = value
  }

  get dexNum() {
    return this.inner.dex_num
  }
  set dexNum(value: number) {
    this.inner.dex_num = value
  }

  get heldItemIndex() {
    return this.inner.held_item_index
  }
  set heldItemIndex(value: number) {
    this.inner.held_item_index = value
  }

  get trainerID() {
    return this.inner.trainer_id
  }
  set trainerID(value: number) {
    this.inner.trainer_id = value
  }

  get secretID() {
    return this.inner.secret_id
  }
  set secretID(value: number) {
    this.inner.secret_id = value
  }

  get exp() {
    return this.inner.exp
  }
  set exp(value: number) {
    this.inner.exp = value
  }

  get abilityIndex() {
    return this.inner.ability_index.index
  }
  set abilityIndex(value: number) {
    this.inner.ability_index = new PkmWasm.AbilityIndex(value)
  }

  get abilityNum() {
    return this.inner.ability_num
  }
  set abilityNum(value: number) {
    this.inner.ability_num = value
  }

  get markings() {
    return markingsSixShapesColorsFromWasm(this.inner.markings)
  }
  set markings(value: types.MarkingsSixShapesWithColor) {
    this.inner.markings = markingsSixShapesColorsToWasm(value)
  }

  get personalityValue() {
    return this.inner.personality_value
  }
  set personalityValue(value: number) {
    this.inner.personality_value = value
  }

  get nature() {
    return this.inner.nature.index
  }
  set nature(value: number) {
    this.inner.nature = new PkmWasm.NatureIndex(value)
  }

  get isFatefulEncounter() {
    return this.inner.is_fateful_encounter
  }
  set isFatefulEncounter(value: boolean) {
    this.inner.is_fateful_encounter = value
  }

  get gender() {
    return this.inner.gender
  }
  set gender(value: number) {
    this.inner.gender = value
  }

  get formeNum() {
    return this.inner.forme_num
  }
  set formeNum(value: number) {
    this.inner.forme_num = value
  }

  get evs() {
    return this.inner.evs
  }
  set evs(value: types.Stats) {
    this.inner.evs = statsToWasmStats8(value)
  }

  get contest() {
    return this.inner.contest
  }
  set contest(value: types.ContestStats) {
    this.inner.contest = contestStatsToWasm(value)
  }

  get resortEventStatus() {
    return this.inner.resort_event_status
  }
  set resortEventStatus(value: number) {
    this.inner.resort_event_status = value
  }

  get pokerusByte() {
    return this.inner.pokerus_byte
  }
  set pokerusByte(value: number) {
    this.inner.pokerus_byte = value
  }

  get superTrainingFlags() {
    return this.inner.super_training_flags
  }
  set superTrainingFlags(value: number) {
    this.inner.super_training_flags = value
  }

  get contestMemoryCount() {
    return this.inner.contest_memory_count
  }
  set contestMemoryCount(value: number) {
    this.inner.contest_memory_count = value
  }

  get battleMemoryCount() {
    return this.inner.battle_memory_count
  }
  set battleMemoryCount(value: number) {
    this.inner.battle_memory_count = value
  }

  get superTrainingDistFlags() {
    return this.inner.super_training_dist_flags
  }
  set superTrainingDistFlags(value: number) {
    this.inner.super_training_dist_flags = value
  }

  get formArgument() {
    return this.inner.form_argument
  }
  set formArgument(value: number) {
    this.inner.form_argument = value
  }

  get nickname() {
    return this.inner.nickname
  }
  set nickname(value: string) {
    this.inner.nickname = value
  }

  get moves() {
    return Array.from(this.inner.move_indices)
  }
  set moves(value: number[]) {
    this.inner.move_indices = new Uint16Array(value)
  }

  get movePP() {
    return Array.from(this.inner.move_pp)
  }
  set movePP(value: number[]) {
    this.inner.move_pp = new Uint8Array(value)
  }

  get movePPUps() {
    return Array.from(this.inner.move_pp_ups)
  }
  set movePPUps(value: number[]) {
    this.inner.move_pp_ups = new Uint8Array(value)
  }

  get relearnMoves() {
    return Array.from(this.inner.relearn_move_indices)
  }
  set relearnMoves(value: number[]) {
    this.inner.relearn_move_indices = new Uint16Array(value)
  }

  get secretSuperTrainingUnlocked() {
    return this.inner.secret_super_training_unlocked
  }
  set secretSuperTrainingUnlocked(value: boolean) {
    this.inner.secret_super_training_unlocked = value
  }

  get secretSuperTrainingComplete() {
    return this.inner.secret_super_training_complete
  }
  set secretSuperTrainingComplete(value: boolean) {
    this.inner.secret_super_training_complete = value
  }

  get ivs() {
    return this.inner.ivs
  }
  set ivs(value: types.Stats) {
    this.inner.ivs = statsToWasmStats8(value)
  }

  get isEgg() {
    return this.inner.is_egg
  }
  set isEgg(value: boolean) {
    this.inner.is_egg = value
  }

  get isNicknamed() {
    return this.inner.is_nicknamed
  }
  set isNicknamed(value: boolean) {
    this.inner.is_nicknamed = value
  }

  get handlerName() {
    return this.inner.handler_name
  }
  set handlerName(value: string) {
    this.inner.handler_name = value
  }

  get handlerGender() {
    return this.inner.handler_gender
  }
  set handlerGender(value: boolean) {
    this.inner.handler_gender = value
  }

  get isCurrentHandler() {
    return this.inner.is_current_handler
  }
  set isCurrentHandler(value: boolean) {
    this.inner.is_current_handler = value
  }

  get geolocations() {
    return geolocationsFromWasm(this.inner.geolocations)
  }
  set geolocations(value: types.Geolocation[]) {
    this.inner.geolocations = geolocationsToWasm(value)
  }

  get handlerFriendship() {
    return this.inner.handler_friendship
  }
  set handlerFriendship(value: number) {
    this.inner.handler_friendship = value
  }

  get handlerAffection() {
    return this.inner.handler_affection
  }
  set handlerAffection(value: number) {
    this.inner.handler_affection = value
  }

  get fullness() {
    return this.inner.fullness
  }
  set fullness(value: number) {
    this.inner.fullness = value
  }

  get enjoyment() {
    return this.inner.enjoyment
  }
  set enjoyment(value: number) {
    this.inner.enjoyment = value
  }

  get trainerName() {
    return this.inner.trainer_name
  }
  set trainerName(value: string) {
    this.inner.trainer_name = value
  }

  get trainerFriendship() {
    return this.inner.trainer_friendship
  }
  set trainerFriendship(value: number) {
    this.inner.trainer_friendship = value
  }

  get trainerAffection() {
    return this.inner.trainer_affection
  }
  set trainerAffection(value: number) {
    this.inner.trainer_affection = value
  }

  get eggDate() {
    return convertPokeDateOptional(this.inner.egg_date)
  }

  set eggDate(value: types.PKMDate | undefined) {
    if (value) {
      this.inner.egg_date = new PkmWasm.PokeDate(value.year, value.month, value.day)
    } else {
      this.inner.egg_date = undefined
    }
  }

  get metDate() {
    return this.inner.met_date
  }
  set metDate(value: types.PKMDate) {
    this.inner.met_date = new PkmWasm.PokeDate(value.year, value.month, value.day)
  }

  get eggLocationIndex() {
    return this.inner.egg_location_index
  }
  set eggLocationIndex(value: number) {
    this.inner.egg_location_index = value
  }

  get metLocationIndex() {
    return this.inner.met_location_index
  }
  set metLocationIndex(value: number) {
    this.inner.met_location_index = value
  }

  get ball() {
    return this.inner.ball
  }
  set ball(value: number) {
    this.inner.ball = value
  }

  get metLevel() {
    return this.inner.met_level
  }
  set metLevel(value: number) {
    this.inner.met_level = value
  }

  get hyperTraining() {
    return this.inner.hyper_training
  }
  set hyperTraining(value: types.HyperTrainStats) {
    this.inner.hyper_training = new PkmWasm.HyperTraining(
      value.hp,
      value.atk,
      value.def,
      value.spa,
      value.spd,
      value.spe
    )
  }

  get gameOfOrigin() {
    return this.inner.game_of_origin.index
  }
  set gameOfOrigin(value: number) {
    this.inner.game_of_origin = new PkmWasm.GameOfOriginIndex(value)
  }

  get country() {
    return this.inner.country
  }
  set country(value: number) {
    this.inner.country = value
  }

  get region() {
    return this.inner.region
  }
  set region(value: number) {
    this.inner.region = value
  }

  get consoleRegion() {
    return this.inner.console_region
  }
  set consoleRegion(value: number) {
    this.inner.console_region = value
  }

  get languageIndex() {
    return this.inner.language_index
  }
  set languageIndex(value: number) {
    this.inner.language_index = value
  }

  get statusCondition() {
    return this.inner.status_condition
  }
  set statusCondition(value: number) {
    this.inner.status_condition = value
  }

  get currentHP() {
    return this.inner.current_hp
  }
  set currentHP(value: number) {
    this.inner.current_hp = value
  }

  get ribbons() {
    console.log('getting ribbons from rust')
    return this.inner.ribbons.map((ribbonName) =>
      ribbonName.endsWith('Ribbon') ? ribbonName.substring(0, ribbonName.length - 7) : ribbonName
    )
  }
  set ribbons(ribbonNames: string[]) {
    this.inner.ribbon_indices = new Uint32Array(
      ribbonNames.map((name) => ModernRibbons.indexOf(name)).filter((idx) => idx !== -1)
    )
  }

  get handlerMemory() {
    return this.inner.handler_memory
  }
  set handlerMemory(value: types.Memory) {
    this.inner.handler_memory = trainerMemoryToWasm(value)
  }

  get trainerMemory() {
    return this.inner.trainer_memory
  }
  set trainerMemory(value: types.Memory) {
    this.inner.trainer_memory = trainerMemoryToWasm(value)
  }

  get trainerGender() {
    return PkmWasm.gender_to_bool(this.inner.trainer_gender)
  }
  set trainerGender(value: boolean) {
    this.inner.trainer_gender = PkmWasm.gender_from_bool(value)
  }

  static fromBytes(buffer: ArrayBuffer): Pk7Rust {
    return new Pk7Rust(buffer)
  }

  public getStats() {
    return getStats(this)
  }

  public get language() {
    return Languages[this.languageIndex]
  }

  public get abilityName() {
    return AbilityToString(this.abilityIndex)
  }
  public get heldItemName() {
    return ItemToString(this.heldItemIndex)
  }

  public get natureName() {
    return NatureToString(this.nature)
  }

  public get ribbonBytes() {
    return this.inner.ribbon_bytes
  }

  public calcChecksum() {
    return encryption.get16BitChecksumLittleEndian(this.toBytes(), 0x08, 0xe8)
  }

  public toBytes() {
    return this.inner.toBytes().buffer as ArrayBuffer
  }

  public refreshChecksum() {
    this.checksum = encryption.get16BitChecksumLittleEndian(this.toBytes(), 0x08, 0xe8)
  }

  public toPCBytes() {
    const shuffledBytes = encryption.shuffleBlocksGen67(this.toBytes())
    return encryption.decryptByteArrayGen67(shuffledBytes)
  }

  public getLevel() {
    return getLevelGen3Onward(this.dexNum, this.exp)
  }

  isShiny() {
    return (
      (this.trainerID ^
        this.secretID ^
        (this.personalityValue & 0xffff) ^
        ((this.personalityValue >> 16) & 0xffff)) <
      16
    )
  }

  isSquareShiny() {
    return !(
      this.trainerID ^
      this.secretID ^
      (this.personalityValue & 0xffff) ^
      ((this.personalityValue >> 16) & 0xffff)
    )
  }

  static maxValidMove() {
    return 728
  }

  static maxValidBall() {
    return 26
  }

  static allowedBalls() {
    return []
  }
}

export default Pk7Rust
