import { sha256Digest } from 'src/util/Encryption.ts'
import { buildSCBlock, SCBlock, writeSCBlock } from './SCBlock'

const SIZE_HASH = 0x20
const IntroHashBytes = new Uint8Array([
  0x9e, 0xc9, 0x9c, 0xd7, 0x0e, 0xd3, 0x3c, 0x44, 0xfb, 0x93, 0x03, 0xdc, 0xeb, 0x39, 0xb4, 0x2a,
  0x19, 0x47, 0xe9, 0x63, 0x4b, 0xa2, 0x33, 0x44, 0x16, 0xbf, 0x82, 0xa2, 0xba, 0x63, 0x55, 0xb6,
  0x3d, 0x9d, 0xf2, 0x4b, 0x5f, 0x7b, 0x6a, 0xb2, 0x62, 0x1d, 0xc2, 0x1b, 0x68, 0xe5, 0xc8, 0xb5,
  0x3a, 0x05, 0x90, 0x00, 0xe8, 0xa8, 0x10, 0x3d, 0xe2, 0xec, 0xf0, 0x0c, 0xb2, 0xed, 0x4f, 0x6d,
])
const OutroHashBytes = new Uint8Array([
  0xd6, 0xc0, 0x1c, 0x59, 0x8b, 0xc8, 0xb8, 0xcb, 0x46, 0xe1, 0x53, 0xfc, 0x82, 0x8c, 0x75, 0x75,
  0x13, 0xe0, 0x45, 0xdf, 0x32, 0x69, 0x3c, 0x75, 0xf0, 0x59, 0xf8, 0xd9, 0xa2, 0x5f, 0xb2, 0x17,
  0xe0, 0x80, 0x52, 0xdb, 0xea, 0x89, 0x73, 0x99, 0x75, 0x79, 0xaf, 0xcb, 0x2e, 0x80, 0x07, 0xe6,
  0xf1, 0x26, 0xe0, 0x03, 0x0a, 0xe6, 0x6f, 0xf6, 0x41, 0xbf, 0x7e, 0x59, 0xc2, 0xae, 0x55, 0xfd,
])
const StaticXorPad = new Uint8Array([
  0xa0, 0x92, 0xd1, 0x06, 0x07, 0xdb, 0x32, 0xa1, 0xae, 0x01, 0xf5, 0xc5, 0x1e, 0x84, 0x4f, 0xe3,
  0x53, 0xca, 0x37, 0xf4, 0xa7, 0xb0, 0x4d, 0xa0, 0x18, 0xb7, 0xc2, 0x97, 0xda, 0x5f, 0x53, 0x2b,
  0x75, 0xfa, 0x48, 0x16, 0xf8, 0xd4, 0x8a, 0x6f, 0x61, 0x05, 0xf4, 0xe2, 0xfd, 0x04, 0xb5, 0xa3,
  0x0f, 0xfc, 0x44, 0x92, 0xcb, 0x32, 0xe6, 0x1b, 0xb9, 0xb1, 0x2e, 0x01, 0xb0, 0x56, 0x53, 0x36,
  0xd2, 0xd1, 0x50, 0x3d, 0xde, 0x5b, 0x2e, 0x0e, 0x52, 0xfd, 0xdf, 0x2f, 0x7b, 0xca, 0x63, 0x50,
  0xa4, 0x67, 0x5d, 0x23, 0x17, 0xc0, 0x52, 0xe1, 0xa6, 0x30, 0x7c, 0x2b, 0xb6, 0x70, 0x36, 0x5b,
  0x2a, 0x27, 0x69, 0x33, 0xf5, 0x63, 0x7b, 0x36, 0x3f, 0x26, 0x9b, 0xa3, 0xed, 0x7a, 0x53, 0x00,
  0xa4, 0x48, 0xb3, 0x50, 0x9e, 0x14, 0xa0, 0x52, 0xde, 0x7e, 0x10, 0x2b, 0x1b, 0x77, 0x6e, 0,
])

function computeHash(data: Uint8Array): Uint8Array {
  // const toHash = this.IntroHashBytes.
  // logHashes({ toHash })
  return sha256Digest([IntroHashBytes, data, OutroHashBytes])
}

function getIsHashValid(data: Uint8Array) {
  const storedHash = data.slice(-SIZE_HASH)
  const computed = computeHash(data.slice(0, -SIZE_HASH))

  return toHexString(storedHash) === toHexString(computed)
}

function cryptStaticXorpadBytes(data: Uint8Array): Uint8Array {
  const xp = StaticXorPad
  const xp64 = new BigUint64Array(xp.buffer)
  const size = xp.length - 1
  let iterationsRemaining = Math.floor((data.length - 1) / size)

  const afterXor = new Uint8Array(new ArrayBuffer(data.buffer.byteLength))

  let currentPos = 0

  do {
    const currentSlice = new BigUint64Array(data.buffer.slice(currentPos, currentPos + xp.length))

    for (let i = currentSlice.length - 1; i >= 0; i--) {
      currentSlice[i] ^= xp64[i]
    }
    afterXor.set(new Uint8Array(currentSlice.buffer), currentPos)
    currentPos += size
  } while (--iterationsRemaining > 0)

  for (let i = 0; currentPos + i < data.buffer.byteLength; i++) {
    afterXor[currentPos + i] = data[currentPos + i] ^ xp[i % xp.length]
  }

  return afterXor
}

function readBlocks(data: Uint8Array): SCBlock[] {
  let offset = 0
  const result: SCBlock[] = []

  while (offset < data.length) {
    // console.log(`offset: ${offset}`)
    const { block, newOffset } = buildSCBlock(data, offset)

    result.push(block)
    offset = newOffset
  }

  return result
}

function decrypt(data: Uint8Array): SCBlock[] {
  const dataBeforeHash = data.slice(0, -SIZE_HASH)
  const dataAfterXor = cryptStaticXorpadBytes(dataBeforeHash)

  return readBlocks(dataAfterXor)
}

function getDecryptedRawData(blocks: SCBlock[], size: number): Uint8Array {
  const buffer = new Uint8Array(size)
  let offset = 0

  for (const block of blocks) {
    offset = writeSCBlock(block, buffer, offset)
  }

  return buffer.slice(0, offset)
}

function encrypt(blocks: SCBlock[], size: number): Uint8Array {
  const rawBytes = getDecryptedRawData(blocks, size)
  const xoredData = cryptStaticXorpadBytes(rawBytes)
  const hash = computeHash(xoredData)
  const encrypted = new Uint8Array(xoredData.length + hash.length)

  encrypted.set(xoredData, 0)
  encrypted.set(hash, xoredData.length)
  return encrypted
}

function toHexString(byteArray: Uint8Array) {
  return Array.from(byteArray, function (byte) {
    return ('0' + (byte & 0xff).toString(16)).slice(-2)
  })
    .join('')
    .toUpperCase()
}

// function logHashes(data: Record<string, Uint8Array>) {
//   for (const [name, bytes] of Object.entries(data)) {
//     let hex = toHexString(bytes)
//     if (hex.length > 64) {
//       hex = hex.slice(0, 32) + '...' + hex.slice(-32)
//     }
//     console.log(`${name}: ${hex} (${bytes.length})`)
//   }
// }

export const SwishCrypto = {
  SIZE_HASH,
  computeHash,
  getIsHashValid,
  decrypt,
  encrypt,
}
